" Universally useful vim plugins

" Improved %
Plug 'matchit.zip'
" f with 2 chars + vim-easymotion alternative
Plug 'justinmk/vim-sneak'
" Show marks. Toggle mark with mN, `N -> goto mark N, m<space> remove all
Plug 'kshenoy/vim-signature'
" Search with number of matches
Plug 'vim-scripts/IndexedSearch'
" Creates directories automatically
Plug 'dockyard/vim-easydir'
" C-a/C-x for dates
Plug 'tpope/vim-speeddating'
" Show detailed info about characters with ga
Plug 'tpope/vim-characterize'
" NetRW+ (- to move from buffer to containing dir)
Plug 'tpope/vim-vinegar'
" Useful pair bindings
Plug 'tpope/vim-unimpaired'
" For camelCase vs snake_case: crs/crm/crc/cru
Plug 'tpope/vim-abolish'
" repeat with . hook for plugins
Plug 'tpope/vim-repeat'

" Useful text objects and movement operators
" (New a*/i* mappings, indent=i/I, function=f
" entire=e, underscore=_, camelcase=,w/,b/,e
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-function'
Plug 'kana/vim-textobj-entire'
Plug 'lucapette/vim-textobj-underscore'
Plug 'vim-scripts/camelcasemotion'
" <,/>,=shift args, [,/], move between args, textobjs a,/i,
Plug 'PeterRincker/vim-argumentative'
" Override default text obj to work on next found left/right
Plug 'wellle/targets.vim'
" Exchange places with cx<movement> cxx=line, X=in visual mode, cxc=clear
Plug 'tommcdo/vim-exchange'

" Manage surroundings with [dcy]s<motion><surrounding>
Plug 'tpope/vim-surround'
" Add surrounding #{ ... } (ruby string var. interpolation)
let g:surround_{char2nr('#')}= "#{\r}"
" ysiwc cmd -> \cmd{bla} for latex
let g:surround_{char2nr('c')} = "\\\1command\1{\r}"
" Easier change inside surroundings with ,ci/,cas
Plug 'briandoll/change-inside-surroundings.vim'

" Tabularize verb (gl/L textobj align char or /regex)
Plug 'tommcdo/vim-lion'
" Regex preview
Plug 'osyo-manga/vim-over'

" Undo tree visualization
Plug 'mbbill/undotree'
map <leader>u :UndotreeToggle<CR>
" Code browser
Plug 'majutsushi/tagbar'
map <leader>t :TagbarToggle<cr>
" Generate view of tasks with XXX/FIXME/TODO
map <leader>T <Plug>TaskList
Plug 'vim-scripts/TaskList.vim'
" Ag (the silver searcher) search (awesome fast code grep with :Ag)
Plug 'rking/ag.vim'

" Code Commenting - gc<Motion> -> toggle comment, gcu -> uncomment commented
Plug 'tpope/vim-commentary'
autocmd FileType matlab set commentstring=\%\ %s
" Automatic code block closing (if ... end, etc)
Plug 'tpope/vim-endwise'
" Auto-Closing for symbols
" Plug 'Raimondi/delimitMate'
" au FileType mail,text,todotxt let b:delimitMate_autoclose = 0 " delimitMate: disable in regular text
Plug 'cohama/lexima.vim'
let g:lexima_no_default_rules=1
au FileType * call lexima#set_default_rules()
au FileType mail,text,todotxt call lexima#clear_rules()

" Color parentheses and other surroundings
Plug 'kien/rainbow_parentheses.vim'
au VimEnter * RainbowParenthesesToggle    " RainbowParentheses: everywhere

" Git integration
Plug 'tpope/vim-fugitive'
" See changed lines within file (:GitGutterToggle)
Plug 'airblade/vim-gitgutter'
let g:gitgutter_realtime = 0      "possibly fix keystroke glitches

" Syntax checking for vim.
Plug 'benekastah/neomake'
" open list without moving the cursor; use :ll to jump to current error
let g:neomake_open_list = 2
" jump to next error
nnoremap <leader>ne :ll<CR>
let g:neomake_warning_sign = {'text': 'W', 'texthl': 'WarningMsg'}
let g:neomake_error_sign = {'text': 'E', 'texthl': 'ErrorMsg'}
autocmd! BufWritePost * Neomake
function! NeomakeCpp()
  let g:neomake_cpp_gcc_maker = neomake#makers#ft#cpp#gcc()
  let g:neomake_cpp_gcc_maker.args += ['-std=c++11']
  let g:neomake_cpp_clang_maker = neomake#makers#ft#cpp#clang()
  let g:neomake_cpp_clang_maker.args += ['-std=c++11', '-Wno-c++11-extensions']
endfunction
au BufRead,BufNewFile *.cpp :call NeomakeCpp()
" let g:syntastic_enable_signs=1    "mark syntax errors with :signs
" let g:syntastic_auto_jump=0       "automatically jump to the error when saving the file
" let g:syntastic_auto_loc_list=1   "show the error list automatically
" let g:syntastic_quiet_messages = {'level': 'warnings'} " No warnings

" slime-like repl interaction for tmux
Plug 'epeli/slimux'
map <leader>s :SlimuxREPLSendLine<CR>
vmap <leader>s :SlimuxREPLSendSelection<CR>

" Tmux and splits, seamless
Plug 'christoomey/vim-tmux-navigator'
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>

" Russian typing
Plug 'einars/translit.vim'
nnoremap <leader>tr :exec Translit('translit.ru')<cr>
" Distraction free writing :Goyo
Plug 'junegunn/goyo.vim'
