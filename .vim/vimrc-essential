" vim: set foldmethod=marker foldlevel=0:
" Universally useful vim plugins

" Improved %
Plug 'vim-scripts/matchit.zip'
" f with 2 chars + vim-easymotion alternative
Plug 'justinmk/vim-sneak'
" Show marks. Toggle mark with mN, `N -> goto mark N, m<space> remove all
Plug 'kshenoy/vim-signature'
" Search with number of matches
Plug 'vim-scripts/IndexedSearch'
" Creates directories automatically
Plug 'dockyard/vim-easydir'
" C-a/C-x for dates
Plug 'tpope/vim-speeddating'
" Show detailed info about characters with ga
Plug 'tpope/vim-characterize'
" NetRW+ (- to move from buffer to containing dir)
Plug 'tpope/vim-vinegar'
let g:netrw_liststyle = 3 " tree style
" Useful pair bindings
Plug 'tpope/vim-unimpaired'
" For camelCase vs snake_case: crs/crm/crc/cru
Plug 'tpope/vim-abolish'
" repeat with . hook for plugins
Plug 'tpope/vim-repeat'

" Useful text objects and movement operators
" (New a*/i* mappings, indent=i/I, function=f
" entire=e, underscore=_, camelcase=,w/,b/,e
Plug 'lucapette/vim-textobj-underscore'
Plug 'vim-scripts/camelcasemotion'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-function'
Plug 'kana/vim-textobj-line'
" Plug 'kana/vim-textobj-entire'
" Exchange places with cx<movement> cxx=line, X=in visual mode, cxc=clear
Plug 'tommcdo/vim-exchange'
" Move lines without pasting
" Plug 'matze/vim-move'
" let g:move_key_modifier = 'C' " todo: find better bindings
" Override default text obj to work on next found left/right
" Plug 'wellle/targets.vim'

" Manage surroundings with [dcy]s<motion><surrounding>
Plug 'tpope/vim-surround'
" ysiwc cmd -> \cmd{bla} for latex
let g:surround_{char2nr('c')} = "\\\1command\1{\r}"
" Easier change inside surroundings with <leader>ci/<leader>cas
Plug 'briandoll/change-inside-surroundings.vim'
" Tabularize verb (gl/L textobj align char or /regex)
Plug 'tommcdo/vim-lion'
" Regex preview (OverCommandLine)
Plug 'osyo-manga/vim-over'

" Undo tree visualization
Plug 'mbbill/undotree'
map <leader>u :UndotreeToggle<CR>
" Code browser
" Plug 'majutsushi/tagbar'
" map <leader>t :TagbarToggle<cr>
Plug 'liuchengxu/vista.vim'
map <leader>t :Vista!!<cr>
" Generate view of tasks with XXX/FIXME/TODO
map <leader>T <Plug>TaskList
Plug 'vim-scripts/TaskList.vim'
" find files etc., using fzf or ag or ripgrep
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Code Commenting - gc<Motion> -> toggle comment, gcu -> uncomment commented
Plug 'tpope/vim-commentary'
" Automatic code block closing (if ... end, etc)
Plug 'tpope/vim-endwise'
" Auto-Closing for symbols
Plug 'cohama/lexima.vim'
let g:lexima_no_default_rules=1
au FileType * call lexima#set_default_rules()
au FileType mail,text,todotxt call lexima#clear_rules()

" Color parentheses and other surroundings
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1 " enable
" Show indentation in space indented code
Plug 'Yggdroot/indentLine'
" Better indentation-aware pasting
Plug 'sickill/vim-pasta'

" Allow project-local vim config (.lvimrc) (better load it early)
" Plug 'embear/vim-localvimrc'
" let g:localvimrc_persistent = 1 " Remember decisions in file
" let g:localvimrc_sandbox = 0 " don't nag with sandbox

" Automatically switch to project root with <leader>cd
Plug 'airblade/vim-rooter'
let g:rooter_manual_only = 1

" Git integration
Plug 'tpope/vim-fugitive'
" See changed lines within file (:GitGutterToggle)
Plug 'airblade/vim-gitgutter'
let g:gitgutter_sign_removed_first_line = "^_"
let g:gitgutter_realtime = 0      "possibly fix keystroke glitches

" Code snippets (complete with C-k) / snipmate replacement
Plug 'honza/vim-snippets'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" {{{ Coc config
let g:coc_global_extensions = ['coc-snippets']
let g:coc_node_path = 'node'

" Use <C-l> for trigger snippet expand (jump variables with C-k/j), :CocList snippets
imap <C-l> <Plug>(coc-snippets-expand)

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
" inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
"                               \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" }}}

Plug 'w0rp/ale'
let g:ale_sign_column_always = 1
let g:ale_echo_msg_format = '%linter%: %s'
" let g:ale_sign_error = '>>'
" let g:ale_sign_warning = '--'
let g:ale_linters = {
\   'tex': [],
\   'python': ['flake8','mypy'],
\}
" let g:ale_python_pylint_options = '-E' " errors only
let g:ale_fixers = {
\   'python': ['black'],
\   'javascript': ['eslint', 'prettier'],
\   'typescript': ['eslint', 'prettier'],
\}
let g:ale_python_mypy_options = '--python-interpreter python'  " we use pyenv
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 0 " not good idea if collaborating, unless used project-wide

" slime-like repl interaction for tmux
Plug 'epeli/slimux'
map <leader>s :SlimuxREPLSendLine<CR>
vmap <leader>s :SlimuxREPLSendSelection<CR>

" Tmux and splits, seamless
" Plug 'christoomey/vim-tmux-navigator'
" let g:tmux_navigator_no_mappings = 1
" nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
" nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
" nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
" nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>

" Copy/paste preview when using "
Plug 'junegunn/vim-peekaboo'

" Russian typing
Plug 'einars/translit.vim'
nnoremap <leader>tr :exec Translit('translit.ru')<cr>
" Spell checking
Plug 'reedes/vim-lexical'
let g:lexical#spelllang = ['en_gb','de_de']
augroup lexical
  autocmd!
  autocmd FileType markdown,mkd,textile,text call lexical#init()
  autocmd FileType tex call lexical#init({'spell':0}) " better enable by hand
augroup END
