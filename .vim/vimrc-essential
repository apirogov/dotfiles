" Universally useful vim plugins, Vundle initialization

" Improved %
Plug 'matchit.zip'
" f with 2 chars + vim-easymotion alternative
Plug 'justinmk/vim-sneak'
" Show marks. Toggle mark with mN, `N -> goto mark N, m<space> remove all
Plug 'kshenoy/vim-signature'
" Search with number of matches
Plug 'vim-scripts/IndexedSearch'
" Creates directories automatically
Plug 'dockyard/vim-easydir'
" C-a/C-x for dates
Plug 'tpope/vim-speeddating'
" Show detailed info about characters with ga
Plug 'tpope/vim-characterize'
" repeat with . hook for plugins
Plug 'tpope/vim-repeat'

" Useful text objects and movement operators
" (New a*/i* mappings, indent=i/I, function=f
" entire=e, underscore=_, camelcase=,w/,b/,e
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-function'
Plug 'kana/vim-textobj-entire'
Plug 'lucapette/vim-textobj-underscore'
Plug 'vim-scripts/camelcasemotion'
" <,/>,=shift args, [,/], move between args, textobjs a,/i,
Plug 'PeterRincker/vim-argumentative'
" Override default text obj to work on next found left/right
Plug 'wellle/targets.vim'

" Exchange places with cx<movement> cxx=line, X=in visual mode, cxc=clear
Plug 'tommcdo/vim-exchange'

" Manage surroundings with [dcy]s<motion><surrounding>
Plug 'tpope/vim-surround'
" Add surrounding #{ ... } (ruby string var. interpolation)
let g:surround_{char2nr('#')}= "#{\r}"
" ysiwc cmd -> \cmd{bla} for latex
let g:surround_{char2nr('c')} = "\\\1command\1{\r}"
" Easier change inside surroundings with ,ci/,cas
Plug 'briandoll/change-inside-surroundings.vim'

" Tabularize verb (gl/L textobj align char or /regex)
Plug 'tommcdo/vim-lion'
" Ag (the silver searcher) search (awesome fast code grep with :Ag)
Plug 'rking/ag.vim'

" NetRW+ (- to move from buffer to containing dir
Plug 'tpope/vim-vinegar'
" Useful pair bindings
Plug 'tpope/vim-unimpaired'
" Undo tree visualization with :UndotreeToggle
Plug 'mbbill/undotree'
map <leader>u :UndotreeToggle<CR>

" Status line on steroids
" Plug 'bling/vim-airline'
" let g:airline_theme='powerlineish'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_section_z='%4l,%3c' " Only line,col
let g:airline#extensions#tabline#enabled = 1

" Open files, mru and buffers with fuzzy search with C-p
Plug 'Shougo/unite.vim'
Plug 'Shougo/vimproc.vim'
" Plug 'Shougo/neomru.vim'
" "Unite settings
" " call unite#filters#matcher_default#use(['matcher_fuzzy'])
" " call unite#filters#sorter_default#use(['sorter_rank'])
" "call unite#custom#source('file_rec/async','sorters','sorter_rank', )
" " replacing unite with ctrl-p
" let g:unite_data_directory='~/.vim/.cache/unite'
" let g:unite_enable_start_insert=1
" let g:unite_source_history_yank_enable=1
" let g:unite_prompt='Â» '
" let g:unite_split_rule = 'botright'
" if executable('ag')
"   let g:unite_source_grep_command='ag'
"   let g:unite_source_grep_default_opts='--nocolor --nogroup -S -C4'
"   let g:unite_source_grep_recursive_opt=''
" endif
" nnoremap <silent> <leader>pp :Unite -auto-resize file file_mru file_rec<cr>
" nnoremap <silent> <leader>pb :Unite -auto-resize buffer<cr>

" Code Commenting - gc<Motion> -> toggle comment, gcu -> uncomment commented
Plug 'tpope/vim-commentary'
" Automatic code block closing (if ... end, etc)
Plug 'tpope/vim-endwise'
" Auto-Closing for symbols
Plug 'Raimondi/delimitMate'
au FileType mail,text,todotxt let b:delimitMate_autoclose = 0 " delimitMate: disable in regular text
" Color parentheses and other surroundings
Plug 'kien/rainbow_parentheses.vim'
au VimEnter * RainbowParenthesesToggle    " RainbowParentheses: everywhere

" Git integration
Plug 'tpope/vim-fugitive'
" Gitk clone within vim (fugitive-extension)
Plug 'gregsexton/gitv'
" See changed lines within file (:GitGutterToggle)
Plug 'airblade/vim-gitgutter'
let g:gitgutter_realtime = 0      "possibly fix keystroke glitches

" Generate view of tasks with XXX/FIXME/TODO with <leader>t
Plug 'vim-scripts/TaskList.vim'
" Syntax checking for vim. Close error window with lclose show with Errors
Plug 'scrooloose/syntastic'
let g:syntastic_enable_signs=1    "mark syntax errors with :signs
let g:syntastic_auto_jump=0       "automatically jump to the error when saving the file
let g:syntastic_auto_loc_list=1   "show the error list automatically
let g:syntastic_quiet_messages = {'level': 'warnings'} " No warnings

" slime-like repl interaction for tmux
Plug 'epeli/slimux'
map <leader>s :SlimuxREPLSendLine<CR>
vmap <leader>s :SlimuxREPLSendSelection<CR>

" Tmux and splits, seamless
Plug 'christoomey/vim-tmux-navigator'
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>
