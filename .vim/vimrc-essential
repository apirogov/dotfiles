" vim: set foldmethod=marker foldlevel=0:
" Universally useful vim plugins

" Plug 'jasonccox/vim-wayland-clipboard'
" Improved %
Plug 'vim-scripts/matchit.zip'
" f with 2 chars + vim-easymotion alternative
Plug 'justinmk/vim-sneak'
" Show marks. Toggle mark with mN, `N -> goto mark N, m<space> remove all
Plug 'kshenoy/vim-signature'
" Search with number of matches
Plug 'vim-scripts/IndexedSearch'
" Creates directories automatically
Plug 'dockyard/vim-easydir'
" C-a/C-x for dates
Plug 'tpope/vim-speeddating'
" Show detailed info about characters with ga
Plug 'tpope/vim-characterize'
" NetRW+ (- to move from buffer to containing dir)
Plug 'tpope/vim-vinegar'
let g:netrw_liststyle = 3 " tree style
" Useful pair bindings
Plug 'tpope/vim-unimpaired'
" For camelCase vs snake_case: crs/crm/crc/cru
Plug 'tpope/vim-abolish'
" repeat with . hook for plugins
Plug 'tpope/vim-repeat'

" Useful text objects and movement operators
" (New a*/i* mappings, indent=i/I, function=f
" entire=e, underscore=_, camelcase=,w/,b/,e
Plug 'lucapette/vim-textobj-underscore'
Plug 'vim-scripts/camelcasemotion'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-function'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-entire'
" Exchange places with cx<movement> cxx=line, X=in visual mode, cxc=clear
Plug 'tommcdo/vim-exchange'

" Manage surroundings with [dcy]s<motion><surrounding>
Plug 'tpope/vim-surround'
" ysiwc cmd -> \cmd{bla} for latex
let g:surround_{char2nr('c')} = "\\\1command\1{\r}"
" Easier change inside surroundings with <leader>ci/<leader>cas
Plug 'briandoll/change-inside-surroundings.vim'
" Tabularize verb (gl/L textobj align char or /regex)
Plug 'tommcdo/vim-lion'
" Regex preview (OverCommandLine)
Plug 'osyo-manga/vim-over'

" Undo tree visualization
Plug 'mbbill/undotree'
map <leader>u :UndotreeToggle<CR>
" find files etc., using fzf or ag or ripgrep
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Code Commenting - gc<Motion> -> toggle comment, gcu -> uncomment commented
Plug 'tpope/vim-commentary'
" Automatic code block closing (if ... end, etc)
Plug 'tpope/vim-endwise'
" Auto-Closing for symbols
Plug 'cohama/lexima.vim'
let g:lexima_no_default_rules=1
au FileType * call lexima#set_default_rules()
au FileType mail,text,todotxt call lexima#clear_rules()

" Color parentheses and other surroundings
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1 " enable
" Show indentation in space indented code
Plug 'Yggdroot/indentLine'
" Better indentation-aware pasting
Plug 'sickill/vim-pasta'

" Automatically switch to project root with <leader>cd
Plug 'airblade/vim-rooter'
let g:rooter_manual_only = 1

" Git integration
Plug 'tpope/vim-fugitive'
" See changed lines within file (:GitGutterToggle)
Plug 'airblade/vim-gitgutter'
let g:gitgutter_sign_removed_first_line = "^_"
let g:gitgutter_realtime = 0      "possibly fix keystroke glitches

Plug 'w0rp/ale'
let g:ale_sign_column_always = 1
let g:ale_echo_msg_format = '%linter%: %s'
" let g:ale_sign_error = '>>'
" let g:ale_sign_warning = '--'
let g:ale_linters = {
\   'tex': [],
\   'python': ['flake8','mypy'],
\}
" let g:ale_python_pylint_options = '-E' " errors only
let g:ale_fixers = {
\   'python': ['black'],
\   'javascript': ['eslint', 'prettier'],
\   'typescript': ['eslint', 'prettier'],
\}
let g:ale_python_mypy_options = '--python-interpreter python'  " we use pyenv
let g:ale_cpp_cc_options = '-std=c++20 -Wall'

let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 0 " not good idea if collaborating, unless used project-wide

" Copy/paste preview when using "
Plug 'junegunn/vim-peekaboo'
" Type unicode characters in vim
Plug 'joom/latex-unicoder.vim'
" Russian typing
Plug 'einars/translit.vim'
nnoremap <leader>tr :exec Translit('translit.ru')<cr>
" Spell checking
Plug 'reedes/vim-lexical'
let g:lexical#spelllang = ['en_gb','de_de']
augroup lexical
  autocmd!
  autocmd FileType markdown,mkd,textile,text call lexical#init()
  autocmd FileType tex call lexical#init({'spell':0}) " better enable by hand
augroup END
