" Latex -> :Latexmk/:LatexView
Plug 'LaTeX-Box-Team/LaTeX-Box'
let g:LatexBox_viewer='zathura'
let g:LatexBox_latexmk_options='-lualatex -latexoption="-synctex=1 \%O \%S" -latexoption=--shell-escape'
let g:LatexBox_custom_indent=0 " conflicts with neocomplete
let g:LatexBox_quickfix=2 " don't steal focus
let g:LatexBox_latexmk_async=0 " auto rebuild on changes
let g:LatexBox_latexmk_preview_continuously=1 " auto rebuild on changes

let g:syntastic_tex_checkers = ['chktex']
au BufRead,BufNewFile *.tex     nnoremap <F9> :!zathura --synctex-forward <C-R>=line('.')<CR>:<C-R>=col('.')<CR>:<C-R>=expand("%:p%:t")<CR> <C-R>=LatexBox_GetOutputFile()<CR> > /dev/null<CR><CR>
au BufRead,BufNewFile *.tex     map <F8>  :w<cr>:Latexmk<cr>
au BufRead,BufNewFile *.tex     map <F7>  :w<cr>:silent !zathura -x "vim --servername <C-R>=v:servername<CR> --remote +\%{line} \%{input}" <C-R>=LatexBox_GetOutputFile()<CR> & > /dev/null<cr>
au BufRead,BufNewFile *.tex     map <F6>  :w<cr>:LatexErrors<cr>

" C/C++
" Plug 'Rip-Rip/clang_complete'

" Coq
" Plug 'def-lkb/vimbufsync'
" Plug 'the-lambda-church/coquille'
"" Maps Coquille commands to <F2> (Undo), <F3> (Next), <F4> (ToCursor)
" au FileType coq call coquille#FNMapping()
" au FileType coq map <F7> :CoqLaunch<cr>
" au FileType coq map <silent> <C-F7> :CoqKill<cr><cr>

" Haskell plugins and config
" --------------------------
"  Better install all necessary cabal stuff into a sandbox!

" Hoogle interface from vim (see :help hoogle)
Plug 'Twinside/vim-hoogle'
" Haskell tab completion with ghc-mod
Plug 'Shougo/vimproc.vim'
Plug 'eagletmt/ghcmod-vim'
" Plug 'eagletmt/neco-ghc'

" type checking and lint
au FileType haskell nnoremap <buffer> <silent> <F1> :GhcModType<CR>
au FileType haskell nnoremap <buffer> <silent> <F3> :GhcModInfo<CR>
au FileType haskell nnoremap <buffer> <silent> <F3> :GhcModTypeClear<CR>

let g:syntastic_haskell_checkers = ['ghc_mod','hlint']

" for hacking on xmonad
autocmd BufRead,BufNewFile ~/.xmonad/* call s:add_xmonad_path()
function! s:add_xmonad_path()
  if !exists('b:ghcmod_ghc_options')
    let b:ghcmod_ghc_options = []
  endif
  call add(b:ghcmod_ghc_options, '-i' . expand('~/.xmonad/lib'))
endfunction

" lushtags is not maintained.. hasktags works better
if executable('hasktags')
let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type'
    \ },
    \ 'scope2kind' : {
        \ 'module' : 'm',
        \ 'class'  : 'c',
        \ 'data'   : 'd',
        \ 'type'   : 't'
    \ }
\ }
endif
